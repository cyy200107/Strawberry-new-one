---
title: "Stawberries clean"
author: Yangyu Chen
date: 2024 Dec 15

---
```{r}
library(dplyr)
library(tidyverse)
library(kableExtra)

# Step 1: Load data and filter for National and State levels only
strawberry_dataset <- read.csv("strawberries25_v3.csv")
head(strawberry_dataset)
colnames(strawberry_dataset)

strawberry_dataset <- strawberry_dataset %>%
  filter(`Geo.Level` %in% c("NATIONAL", "STATE"))

# Step 2: Remove columns with a single unique value
remove_constant_columns <- function(dataset) {
  print(paste("Scanning dataset:", deparse(substitute(dataset)), "for constant columns."))
  
  constant_cols <- sapply(dataset, function(column) length(unique(column)) == 1)
  
  if (all(!constant_cols)) {
    message("No constant columns found.")
    return(dataset)
  }
  
  removed <- names(dataset)[constant_cols]
  print(paste("Removed columns:", paste(removed, collapse = ", ")))
  
  return(dataset[, !constant_cols])
}

strawberry_dataset <- remove_constant_columns(strawberry_dataset)
head(strawberry_dataset)

# Step 3: Split the data into Census and Survey datasets
census_data <- strawberry_dataset %>%
  filter(Program == "CENSUS")

survey_data <- strawberry_dataset %>%
  filter(Program == "SURVEY")

head(census_data)
head(survey_data)

unique_census_data_items <- unique(census_data$Data.Item)
unique_survey_data_items <- unique(survey_data$Data.Item)

# Step 4: Process the Data.Item column in Census data
census_cleaned_data <- census_data %>%
  separate(`Data.Item`, into = c("Category_Type", "Operation_Type"), sep = " - ", extra = "merge", fill = "right") %>%
  separate(Category_Type, into = c("Main_Group", "Sub_Type"), sep = ", ", extra = "merge", fill = "right") %>%
  mutate(
    Main_Group = str_trim(Main_Group),
    Sub_Type = replace_na(str_trim(Sub_Type), "OTHER"),
    Operation_Type = str_trim(Operation_Type)
  ) %>%
  select(-Main_Group)

head(census_cleaned_data)

# Step 5: Process the Data.Item column in Survey data
survey_cleaned_data <- survey_data %>%
  separate(`Data.Item`, into = c("Product_Details", "Other_Info"), sep = " - ", extra = "merge", fill = "right") %>%
  separate(Product_Details, into = c("Commodity_Name", "Market_Category"), sep = ", ", extra = "merge", fill = "right") %>%
  separate(Other_Info, into = c("Measure_Type", "Unit_Type"), sep = ", MEASURED IN ", extra = "merge", fill = "right") %>%
  mutate(
    Commodity_Name = str_trim(Commodity_Name),
    Market_Category = replace_na(str_trim(Market_Category), "OTHER"),
    Measure_Type = str_trim(Measure_Type),
    Unit_Type = str_trim(Unit_Type)
  ) %>%
  select(-Commodity_Name)

head(survey_cleaned_data)

# Step 6: Process the Domain.Category column in Survey data
survey_cleaned_data <- survey_cleaned_data %>%
  separate(`Domain.Category`, into = c("Chemical_Group", "Chemical_Detail"), sep = ": ", extra = "merge", fill = "right") %>%
  mutate(
    Chemical_Group = str_trim(str_replace(Chemical_Group, "CHEMICAL, ", "")),
    Chemical_Detail = ifelse(Chemical_Group == "NOT SPECIFIED", "NOT SPECIFIED", Chemical_Detail)
  ) %>%
  separate(Chemical_Detail, into = c("Chemical_Name", "Chemical_Code"), sep = " = ", extra = "merge", fill = "right") %>%
  mutate(
    Chemical_Name = str_trim(str_replace_all(Chemical_Name, "[()]", "")),
    Chemical_Code = as.numeric(str_trim(str_replace(Chemical_Code, "[)]$", "")))
  )

head(survey_cleaned_data)

# Step 7: Process the Domain.Category column in Census data
census_cleaned_data <- census_cleaned_data %>%
  separate(`Domain.Category`, into = c("Category_Class", "Additional_Info"), sep = ": ", extra = "merge", fill = "right") %>%
  mutate(
    Category_Class = str_trim(Category_Class),
    Additional_Info = ifelse(Category_Class == "NOT SPECIFIED", "NOT SPECIFIED", str_trim(str_replace_all(Additional_Info, "[()]", "")))
  )

head(census_cleaned_data)

# Step 8: Replace missing State.ANSI values with -1
survey_cleaned_data <- survey_cleaned_data %>%
  mutate(State.ANSI = replace_na(State.ANSI, -1))

census_cleaned_data <- census_cleaned_data %>%
  mutate(State.ANSI = replace_na(State.ANSI, -1))

# Step 9: Fill missing values in Census data using a linear regression model
census_cleaned_data <- census_cleaned_data %>%
  mutate(Value = as.numeric(Value)) %>%
  drop_na(Value, Year, Category_Class, Additional_Info, State.ANSI) %>%
  mutate(Category_Class = as.factor(Category_Class), Additional_Info = as.factor(Additional_Info))

census_model <- lm(Value ~ Year + Category_Class + Additional_Info + State.ANSI, data = census_cleaned_data)
summary(census_model)

census_cleaned_data <- census_cleaned_data %>%
  mutate(Value = ifelse(is.na(Value), predict(census_model, newdata = .), Value))

# Step 10: Fill missing values in Survey data using a linear regression model
survey_cleaned_data <- survey_cleaned_data %>%
  mutate(Value = as.numeric(Value)) %>%
  drop_na(Value, Year, Market_Category, Unit_Type, State.ANSI) %>%
  mutate(Market_Category = as.factor(Market_Category), Unit_Type = as.factor(Unit_Type))

survey_model <- lm(Value ~ Year + Unit_Type + Market_Category + State.ANSI, data = survey_cleaned_data)
summary(survey_model)

survey_cleaned_data <- survey_cleaned_data %>%
  mutate(Value = ifelse(is.na(Value), predict(survey_model, newdata = .), Value))

# Step 11: Save the cleaned datasets
write.csv(survey_cleaned_data, "survey_clean_output.csv", row.names = FALSE)
write.csv(census_cleaned_data, "census_clean_output.csv", row.names = FALSE)
```